
Synchronization issues are very common in selenium web driver. To overcome these issues we use waits.
We have used only one thing to slow down our script :

Thread.sleep() --> to slow down our script

Thread class is from Java.

Waits from Selenium:
- implicit wait            неявное ожидание    it's like general wait
- explicit wait            явное ожидание , detailed, clear
- fluent wait              беглое ожидание

DOM - это где мы ищем локаторы

IMPLICIT WAIT - apply only once at the beginning of test execution. It works before findElement() method automatically.
If WebDriver cannot find an element in the DOM (HTML document),it waits for defined amount of time for the element to
appear in the DOM. Once specified wait time is over, and element is not found, in specified time, it will throw
NoSuchElementException.

Default implicit wait is - 0 seconds;

When implicit wait has been applied, webDriver will try to look up for element in the specified period of time.
If element was found faster, execution will be resumed.

-------------------------------------------------
How to use implicit wait?

driver.manage().timeouts().implicitlyWait(time, time units);

For example:

driver.manage().timeouts().implicitlyWait(20, TimeUnits.SECONDS);

That means webDriver, will be waiting for any element up to 20 seconds.

Use only once after get() method.
driver.get();
---------------------------------------------------------------------

RECOMMENDATION: don't use implicit and explicit waits together. You might get unexpectedly long waits.

---------------------------------------------------------------------
EXPLICIT WAIT - provides better way to wait over implicit wait. Unlike implicit wait, you can write and use
pre-defined conditions or custom conditions before proceeding further.
заново определенные условия или пользовательские условия, прежде чем продолжить.

Explicit wait - exact condition and exact element. Implicit wait - only one condition (presence of element in the DOM)
and it applies for every findElement() method invocation.
-----------------------------------------------------------------------
How to implement Explicit wait?
For this, we use WebDriverWait class.

WebDriverWait wait = new WebDriverWait(driver, time in seconds);
------------------------------------------------------------------------
Then, we have ExpectedConditions class that provides wait conditions.

ExpectedConditions class provides a set of predefined conditions to wait for before proceeding further.
                   предоставляет набор предопределенных условий для ожидания, прежде чем продолжить.

some common explicit wait conditions:

elementToBeClickable()
visibilityOf()
presenceOfLocatedElement()
titleContains()
-----------------------------------------------------
Example:

WebElement buttonElement = driver.findElement(By.xpath("//button[6]"));

WebDriverWait wait = new WebDriverWait(driver, 10);

wait.until(ExpectedConditions.elementToBeClickable(buttonElement));

this wait means: wait for up to 10 seconds, until button becomes eligible to click.

WebDriverWait has a default polling time - 500 milliseconds. It means, that WebDriver is checking every
500 milliseconds if condition is true.

---------------------------------------------------------------------------------------
Explicit wait - it's an individual approach.
Implicit wait - is general approach.

Implicit wait - we use only once.
Explicit wait - as many times as we need.

----------------------------------------------------------------------------------------
If condition failed, webDriver throws exception.
-------------------------------------------------------
org.openqa.selenium.TimeoutException: Expected condition failed: waiting for title to contain "Amazon".
Current title: "Google" (tried for 10 second(s) with 500 milliseconds interval)

When condition fails, it throws TimeoutException.
---------------------------------------------------------------------

org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button type="submit"
class="btn btn-primary">...</button> is not clickable at point (97, 480).

---------------------------------------------------------------------


ElementClickInterceptedException - means that something else was clicked instead of your element.
----------------------------------------------------------------------



FLUENT WAIT - it's a custom explicit wait. With Fluent wait we can define the maximum amount of wait time
for condition and element as well as frequency with which to check for the condition (polling time).время опроса

For explicit wait, polling time is always 500 milliseconds. In fluent wait, we can change it.

 Wait<WebDriver> wait = new FluentWait<>(driver).
                withTimeout(Duration.ofSeconds(10)).
                pollingEvery(Duration.ofSeconds(5)).
                ignoring(NoSuchElementException.class).
                ignoring(ElementClickInterceptedException.class);
        WebDriverWait  webDriverWait = new WebDriverWait(driver, 15);
        webDriverWait.until(ExpectedConditions.invisibilityOfElementLocated(By.className("loadingoverlay")));

//Anonymous - class without name
        WebElement submitBtn = wait.until(driver -> driver.findElement(By.xpath("//button[text()='Submit']")));
        driver.findElement(By.name("username")).sendKeys("tomsmith");
        driver.findElement(By.name("password")).sendKeys("SuperSecretPassword");
        submitBtn.click();
##############################
Synchronization - one of the biggest issues in selenium webdriver. To resolve wait issues, we have:
    Thread.sleep()
    implicit wait
    explicit wait
    fluent wait
Thread.sleep() - to pause java program, not coming from selenium, it's a java feature
implicit wait - wait for element to be present in DOM. Apply only once, works before findElement() automatically
explicit wait - wait for specific element based on specific condition withing specific time.
fluent wait - like explicit wait, but also allows to change polling time.
