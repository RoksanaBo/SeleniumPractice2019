Today is review: build a new framework
Tuesday - Excel IO
Wednesday - git, branches, pull requests, forks, git fables
Saturday -  Cucumber BDD
RULE #1: DON'T Laugh at your classmates
RULE #2: THERE IS NO STUPID QUESTIONS, UNLESS IT'S NOT RELAVANT TO THE CLASS
RULE #3: DON'T JUDGE ANYONE
RULE #4: PLEASE LISTEN UP!!!!!!!
#############################################################
Plan: we will take weborders app. It has just couple of pages and it's relatively fast app.
What is framework? your project, collection of your tests with libraries. Place where you develop new tests.
Framework is a set of pre-written code libraries designed to be used by developers. A programming language is a specified method of communication between the programmer and computer.
1. Create new maven project -->
    project name/artifact id: WebOrdersAutomation2020
    group id: com.weborders
    default archetype
2. Add dependencies:
    selenium webdriver
    webdrivermanager
    testng
    extent report
    slf4j --- intellij logger
    build plugin, to fix java version issue
    2.1. Enable auto import
3. Create configuration.properties file
    web application utl
    credentials
    browser name
    explicit wait time (optional, I will show)
4. Create .gitignore file and add there:
    .idea
    *.iml
    target
    test-output
    anything that you don't wanna push
5. create packages:
go to src--> test --> java
                    create --> com.weborders.
                                            pages
                                            tests
                                            utilities
6. Add utilities:

    Driver class
    BrowserUtilities
    DateTimeUtilities
    ConfigurationReader
7. Create a AbstractTestBase class
    7.1.
        Add before method:
        @BeforeMethod
        public void setup(){
            open browser
            maximize window
        }
    7.2. Add after method:
        @AfterMethod
        public void teardown(){
            close browser
            take a screenshot if test failed
        }
    7.3. Setup extent report
        @BeforeTest
        public void beforeTest(){
            setup report
        }
    7.4. Generate report
        @AfterTest
        public void afterTest(){
            flush report
        }
8. Create AbstractBasePage class under pages:

    8.1. Initialize page factory
    8.2. Put some common method/webelements/locators here. Let other page classes extend it.
9. Create git repository:

    9.1.
        git init
        git add .
        git commit -m "first commit"
    9.2. Go to github, create repository with same name.
    9.3. Execute steps for exiting repository. There are 2 steps: connect local repo with remote and push everything.
    Then, next time you will just to execute:
        - git commit -a -m "commit message"
        - git push
    To get updates: git pull
10. Create suite runners:
    10.1. Right on the project --> new file --> testng.xml
    10.2. Add basic setup:
        <!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd" >

        <suite name="Suite1" verbose="1" >
          <test name="Nopackage" >
            <classes>
               <class name="NoPackageTest" />
            </classes>
          </test>
        </suite>
